#!/usr/bin/env bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([interval],[i],[seconds to wait in between runs of cmd],[5])
# ARG_OPTIONAL_SINGLE([title],[t],[set the plot title. by default this is constructed from the cmd],[])
# ARG_POSITIONAL_SINGLE([cmd],[command to run. must output a single number])
# ARG_DEFAULTS_POS([])
# ARG_HELP([Runs a command repeatedly and plots its output. Expects the command to output a single number])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ith'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_cmd=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_interval="5"
_arg_title=


print_help()
{
	printf '%s\n' "Runs a command repeatedly and plots its output. Expects the command to output a single number"
	printf 'Usage: %s [-i|--interval <arg>] [-t|--title <arg>] [-h|--help] <cmd>\n' "$0"
	printf '\t%s\n' "<cmd>: command to run. must output a single number"
	printf '\t%s\n' "-i, --interval: seconds to wait in between runs of cmd (default: '5')"
	printf '\t%s\n' "-t, --title: set the plot title. by default this is constructed from the cmd (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-i|--interval)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_interval="$2"
				shift
				;;
			--interval=*)
				_arg_interval="${_key##--interval=}"
				;;
			-i*)
				_arg_interval="${_key##-i}"
				;;
			-t|--title)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_title="$2"
				shift
				;;
			--title=*)
				_arg_title="${_key##--title=}"
				;;
			-t*)
				_arg_title="${_key##-t}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'cmd'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_cmd "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -euo pipefail


title="[interval=${_arg_interval}] ${_arg_cmd}"
if [[ -n "${_arg_title}" ]]; then
	title="[interval=${_arg_interval}] ${_arg_title}"
fi

exec 3> >(ttyplot -t "${title}")

while true; do
	bash -c "${_arg_cmd}" >&3 2>/dev/null

	sleep "${_arg_interval}"
done

exec 3>&-

# ] <-- needed because of Argbash
