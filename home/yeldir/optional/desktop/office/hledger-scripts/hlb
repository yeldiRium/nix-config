#!/usr/bin/env bash

# ARG_OPTIONAL_BOOLEAN([tree],[t],[show account list as a tree],[on])
# ARG_HELP([Show an overview of the current balance of the main accounts.])
# ARG_USE_ENV([HL_MAIN_ACCOUNTS],[],[Semicolon-delimited list of accounts to take into account])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Setting environmental variables


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='th'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_tree="on"


print_help()
{
	printf '%s\n' "Show an overview of the current balance of the main accounts."
	printf 'Usage: %s [-t|--(no-)tree] [-h|--help]\n' "$0"
	printf '\t%s\n' "-t, --tree, --no-tree: show account list as a tree (on by default)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\nEnvironment variables that are supported:\n'
	printf '\t%s\n' "HL_MAIN_ACCOUNTS: Semicolon-delimited list of accounts to take into account."

}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-t|--no-tree|--tree)
				_arg_tree="on"
				test "${1:0:5}" = "--no-" && _arg_tree="off"
				;;
			-t*)
				_arg_tree="on"
				_next="${_key##-t}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-t" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

tree_flag=""
if [[ $_arg_tree = "on" ]]; then
	tree_flag="--tree"
fi

IFS=";" read -r -a accounts <<< "${HL_MAIN_ACCOUNTS}"

hledger balancesheetequity \
	--historical \
	--market \
	"${tree_flag}" \
	date:today \
	"${accounts[@]}"

# ] <-- needed because of Argbash
