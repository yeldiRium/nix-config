#!/usr/bin/env bash

# ARG_OPTIONAL_BOOLEAN([verbose],[v],[Include empty accounts in output.])
# ARG_OPTIONAL_SINGLE([months],[m],[How many months should be shown.],[5])
# ARG_OPTIONAL_SINGLE([period],[p],[The period by which the budget is grouped. Try 'monthly', 'quarterly' or 'yearly'.],[monthly])
# ARG_HELP([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='vmph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose="off"
_arg_months="5"
_arg_period="monthly"


print_help()
{
	printf 'Usage: %s [-v|--(no-)verbose] [-m|--months <arg>] [-p|--period <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-v, --verbose, --no-verbose: Include empty accounts in output. (off by default)"
	printf '\t%s\n' "-m, --months: How many months should be shown. (default: '5')"
	printf '\t%s\n' "-p, --period: The period by which the budget is grouped. Try 'monthly', 'quarterly' or 'yearly'. (default: 'monthly')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-v|--no-verbose|--verbose)
				_arg_verbose="on"
				test "${1:0:5}" = "--no-" && _arg_verbose="off"
				;;
			-v*)
				_arg_verbose="on"
				_next="${_key##-v}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-m|--months)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_months="$2"
				shift
				;;
			--months=*)
				_arg_months="${_key##--months=}"
				;;
			-m*)
				_arg_months="${_key##-m}"
				;;
			-p|--period)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_period="$2"
				shift
				;;
			--period=*)
				_arg_period="${_key##--period=}"
				;;
			-p*)
				_arg_period="${_key##-p}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -e

BUDGET_ACCOUNTS=(
	'acct:expenses:Drugs'
	'acct:expenses:Food'
	'acct:expenses:Gift'
	'acct:expenses:Groceries'
	'acct:expenses:Hobby'
	'acct:expenses:Living Space'
	'acct:expenses:Tips'
	# Projects are budgeted separately.
	'not:tag:project'
)

VERBOSE_FLAGS=""
if [[ "${_arg_verbose}" = "on" ]]; then
	VERBOSE_FLAGS="--empty"
fi

PERIOD="${_arg_period}"

START_MONTH=$(date --date "-${_arg_months}month" +%m)
START_YEAR=$(date --date "-${_arg_months}month" +%Y)

START_DATE="${START_YEAR}-${START_MONTH}"

hledger balance \
  --value=end \
  --empty \
  "--${PERIOD}" \
  --begin="${START_DATE}" \
  --budget \
  --average \
  "${VERBOSE_FLAGS}" \
  --tree \
  --sort-amount \
  --color=always \
  "${BUDGET_ACCOUNTS[@]}"

# ] <-- needed because of Argbash
