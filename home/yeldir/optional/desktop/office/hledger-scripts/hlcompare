#!/usr/bin/env bash

# ARG_OPTIONAL_SINGLE([day-of-month],[d],[Day of the month on which to compare the previous months])
# ARG_OPTIONAL_SINGLE([months],[m],[Amount of months to display],[6])
# ARG_HELP([Compare account balances across the last six months])
# ARG_USE_ENV([HL_MAIN_ACCOUNTS],[],[Semicolon-delimited list of accounts to take into account])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Setting environmental variables


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='dmh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_day_of_month=
_arg_months="6"


print_help()
{
	printf '%s\n' "Compare account balances across the last six months"
	printf 'Usage: %s [-d|--day-of-month <arg>] [-m|--months <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-d, --day-of-month: Day of the month on which to compare the previous months (no default)"
	printf '\t%s\n' "-m, --months: Amount of months to display (default: '6')"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\nEnvironment variables that are supported:\n'
	printf '\t%s\n' "HL_MAIN_ACCOUNTS: Semicolon-delimited list of accounts to take into account."

}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-d|--day-of-month)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_day_of_month="$2"
				shift
				;;
			--day-of-month=*)
				_arg_day_of_month="${_key##--day-of-month=}"
				;;
			-d*)
				_arg_day_of_month="${_key##-d}"
				;;
			-m|--months)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_months="$2"
				shift
				;;
			--months=*)
				_arg_months="${_key##--months=}"
				;;
			-m*)
				_arg_months="${_key##-m}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -e

if [[ $_arg_months -le 1 ]]; then
	echo "months must be at least 2 to compare"
	exit 1
fi

day_of_month=$(date --date '+1 days' '+%d')

if [[ $_arg_day_of_month != '' ]]; then
	day_of_month=$_arg_day_of_month
fi

begin_date=$(date --date "-${_arg_months} months" '+%Y-%m')

IFS=";" read -r -a accounts <<< "${HL_MAIN_ACCOUNTS}"

hledger balancesheet \
	--market \
	--period "every ${day_of_month}th day" \
	--begin "${begin_date}" \
	--end tomorrow \
	--depth 4 \
	--tree \
	"${accounts[@]}"

# ] <-- needed because of Argbash
