#!/usr/bin/env bash

# ARG_OPTIONAL_SINGLE([months-before],[b],[Amount of months before today that are shown],[12])
# ARG_OPTIONAL_SINGLE([months-after],[a],[Amount of months after today that are shown],[3])
# ARG_OPTIONAL_BOOLEAN([by-account],[],[Group transactions by account instead of project],[off])
# ARG_HELP([Show data related to projects])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='bah'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_months_before="12"
_arg_months_after="3"
_arg_by_account="off"


print_help()
{
	printf '%s\n' "Show data related to projects"
	printf 'Usage: %s [-b|--months-before <arg>] [-a|--months-after <arg>] [--(no-)by-account] [-h|--help]\n' "$0"
	printf '\t%s\n' "-b, --months-before: Amount of months before today that are shown (default: '12')"
	printf '\t%s\n' "-a, --months-after: Amount of months after today that are shown (default: '3')"
	printf '\t%s\n' "--by-account, --no-by-account: Group transactions by account instead of project (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-b|--months-before)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_months_before="$2"
				shift
				;;
			--months-before=*)
				_arg_months_before="${_key##--months-before=}"
				;;
			-b*)
				_arg_months_before="${_key##-b}"
				;;
			-a|--months-after)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_months_after="$2"
				shift
				;;
			--months-after=*)
				_arg_months_after="${_key##--months-after=}"
				;;
			-a*)
				_arg_months_after="${_key##-a}"
				;;
			--no-by-account|--by-account)
				_arg_by_account="on"
				test "${1:0:5}" = "--no-" && _arg_by_account="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

begin_date=$(date --date "-${_arg_months_before} months" '+%Y-%m')
end_date=$(date --date "+${_arg_months_after} months" '+%Y-%m')

if [[ $_arg_by_account = "off" ]]; then
	hledger cashflow \
		--monthly \
		--market \
		--begin "${begin_date}" \
		--end "${end_date}" \
		--forecast \
		--pivot "project" \
		--row-total \
		"tag:project"
else
	hledger incomestatement \
		--monthly \
		--market \
		--begin "${begin_date}" \
		--end "${end_date}" \
		--forecast \
		--pivot "acct" \
		--row-total \
		"tag:project"
fi

# ] <-- needed because of Argbash
