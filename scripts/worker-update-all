#!/usr/bin/env bash
# shellcheck disable=SC2317 # To remove the warning in argbash generated code

# ARG_HELP([Update all workers.])
# ARG_USE_ENV([FLAKE],[],[Absolute path to the nix-config flake directory.])
# ARG_DEFAULTS_POS([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info

# Setting environmental variables


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "Update all workers."
	printf 'Usage: %s [-h|--help]\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\nEnvironment variables that are supported:\n'
	printf '\t%s\n' "FLAKE: Absolute path to the nix-config flake directory.."

}


parse_commandline()
{
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -eu

jq --raw-output '. | keys[]' "${FLAKE}/workers.json" | while read -r workerName; do
	# Need to pass /dev/null as stdin, because otherwise the jq output piped to
	# while will be consumed by the worker-update script. No clue why.
	"${FLAKE}"/scripts/worker-update "${workerName}" </dev/null
done

# ] <-- needed because of Argbash
