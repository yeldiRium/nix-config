#!/usr/bin/env bash

# ARG_HELP([Bootstrap a new server with the nixos config "worker". Includes setting up an age key for sops.])
# ARG_POSITIONAL_SINGLE([shortname],[The server's shortname. Should be a five-char url-compatible string, that will be used as the hostname-suffix and machineid-suffix.],[])
# ARG_POSITIONAL_SINGLE([ipv6],[The server's ipv6 address. SSH to it must be possible with root@<ipv6>.],[])
# ARG_USE_ENV([FLAKE],[],[Absolute path to the nix-config flake directory])
# ARG_DEFAULTS_POS([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Setting environmental variables


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_shortname=
_arg_ipv6=
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "Bootstrap a new server with the nixos config \"worker\". Includes setting up an age key for sops."
	printf 'Usage: %s [-h|--help] <shortname> <ipv6>\n' "$0"
	printf '\t%s\n' "<shortname>: The server's shortname. Should be a five-char url-compatible string, that will be used as the hostname-suffix and machineid-suffix."
	printf '\t%s\n' "<ipv6>: The server's ipv6 address. SSH to it must be possible with root@<ipv6>."
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\nEnvironment variables that are supported:\n'
	printf '\t%s\n' "FLAKE: Absolute path to the nix-config flake directory."

}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'shortname' and 'ipv6'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_shortname _arg_ipv6 "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -eu

temp=$(mktemp -d)
mkdir -p "${temp}/root/"
mkdir -p "${temp}/home/worker/"

sops decrypt --extract '["sops-host-worker"]' "${FLAKE}/secrets.yaml" > "${temp}/root/keys.txt"
sops decrypt --extract '["sops-user-worker"]' "${FLAKE}/secrets.yaml" > "${temp}/home/worker/keys.txt"

newWorker=$(cat <<EOF
{
	"shortname": "${_arg_shortname}",
	"ipv6": "${_arg_ipv6}"
}
EOF
)

newWorkers=$(jq "setpath([\"${_arg_shortname}\"]; ${newWorker})" "${FLAKE}/workers.json")
echo "${newWorkers}" > "${FLAKE}/workers.json"

nixos-anywhere --extra-files "${temp}" --flake "${FLAKE}#worker-${_arg_shortname}" --target-host "root@${_arg_ipv6}" -i ~/.ssh/hleutloff

rm -rf "${temp}"

echo "new worker with name \"${_arg_shortname}\" has been set up."
echo "ssh to it using:"
echo "ssh worker-${_arg_shortname}"

# ] <-- needed because of Argbash
