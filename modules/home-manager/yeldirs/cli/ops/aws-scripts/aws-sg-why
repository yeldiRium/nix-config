#!/usr/bin/env bash

# ARG_OPTIONAL_SINGLE([group-id],[],[AWS SecurityGroup ID])
# ARG_HELP([Finds out, why a security group can't be deleted])
# ARG_DEFAULTS_POS([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_group_id=


print_help()
{
	printf '%s\n' "Finds out, why a security group can't be deleted"
	printf 'Usage: %s [--group-id <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "--group-id: AWS SecurityGroup ID (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--group-id)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_group_id="$2"
				shift
				;;
			--group-id=*)
				_arg_group_id="${_key##--group-id=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

if [[ -z "${_arg_group_id}" ]]; then
	echo "Missing value for the required argument --group-id."
	exit 1
fi

# Security Group might belong to network interface
rawNetworkInterfaces="$(aws ec2 describe-network-interfaces --filter "Name=group-id,Values=${_arg_group_id}")"
networkInterfaces="$(echo "${rawNetworkInterfaces}" | jq 'map_values(map(pick(.Description, .InterfaceType, .NetworkInterfaceId)))')"

jq --slurp 'reduce .[] as $item ({}; . + $item)' <<EOF
${networkInterfaces}
EOF

# ] <-- needed because of Argbash
