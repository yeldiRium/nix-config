#!/usr/bin/env bash

# ARG_HELP([Opens a given file in a git repository in its gui, if possible])
# ARG_POSITIONAL_SINGLE([file-path],[The file to open])
# ARG_OPTIONAL_BOOLEAN([debug],[],[Enable debug output],[off])
# ARG_DEFAULTS_POS([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_file_path=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_debug="off"


print_help()
{
	printf '%s\n' "Opens a given file in a git repository in its gui, if possible"
	printf 'Usage: %s [-h|--help] [--(no-)debug] <file-path>\n' "$0"
	printf '\t%s\n' "<file-path>: The file to open"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "--debug, --no-debug: Enable debug output (off by default)"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			--no-debug|--debug)
				_arg_debug="on"
				test "${1:0:5}" = "--no-" && _arg_debug="off"
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'file-path'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_file_path "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -e

function echoerr {
	echo "$@" 1>&2
}

function debug {
	if [[ $_arg_debug == "on" ]]; then
		echoerr "${1}"
	fi
}

function findGitRepositoryUrl() {
	local repoPath remoteBranch remote remoteUrl
	repoPath="${1}"

	if ! git -C "${repoPath}" status \
		>/dev/null 2>/dev/null; then
		echoerr "File is not part of a git repository"
		exit 1
	fi

	remoteBranch="$(git -C "${repoPath}" rev-parse --abbrev-ref --symbolic-full-name '@{u}')"
	debug "Active remote branch is ${remoteBranch}"
	remote="${remoteBranch/\/*}"
	remoteUrl="$(git -C "${repoPath}" config "remote.${remote}.url")"

	echo "${remoteUrl}"
}

function findGitHostType() {
	local url
	url="${1}"

	response="$(ssh "${url}" 2>&1)"

	if [[ "${response}" == *Gitea* ]]; then
		echo "gitea"
	elif [[ "${response}" == *GitHub* ]]; then
		echo "github"
	elif [[ "${response}" == *GitLab* ]]; then
		echo "gitlab"
	else
		echoerr "Could not determine the kind of git host, sorry."
		exit 1
	fi
}

function getRelativeFilePath() {
	local basePath filePath
	basePath="${1}"
	filePath="${2}"

	repoRoot="$(git -C "${basePath}" rev-parse --show-toplevel)"

	relativePath="$(realpath "${filePath}" --relative-to "${repoRoot}")"

	echo "${relativePath}"
}

function getRemoteRepoPath() {
	local repositoryUrl repositoryPath
	repositoryUrl="${1}"

	repositoryPath=""
	if [[ "${repositoryUrl}" == *@* ]]; then
		repositoryPath="${repositoryUrl#*:}"
		repositoryPath="${repositoryPath%.git}"
	fi
	if [[ "${repositoryUrl}" == https* ]]; then
		repositoryPath="${repositoryUrl#*\/}"
		repositoryPath="${repositoryPath%.git}"
	fi

	echo "${repositoryPath}"
}

function buildFileUrl() {
	local basePath hostType hostUrl repoPath filePath
	basePath="${1}"
	hostType="${2}"
	hostUrl="${3}"
	repoPath="${4}"
	filePath="${5}"

	# Special case for remotes that have a separate subdomain for ssh
	# This happens rarely and hopefully breaks nothing
	hostUrl="${hostUrl#ssh.}"

	activeBranch="$(git -C "${basePath}" rev-parse --abbrev-ref 'HEAD')"

	case "${hostType}" in
		"gitea")
			printf "https://%s/%s/src/branch/%s/%s" "${hostUrl}" "${repoPath}" "${activeBranch}" "${filePath}"
			;;
		"gitlab")
			printf "https://%s/%s/-/blob/%s/%s" "${hostUrl}" "${repoPath}" "${activeBranch}" "${filePath}"
			;;
		"github")
			printf "https://%s/%s/blob/%s/%s" "${hostUrl}" "${repoPath}" "${activeBranch}" "${filePath}"
			;;
	esac
}

function openUrl() {
	local fileUrl
	fileUrl="${1}"

	if command -v "xdg-open" >/dev/null 2>&1; then
		xdg-open "${fileUrl}"
	elif command -v "open" >/dev/null 2>&1; then
		open "${fileUrl}"
	else
		echoerr "I can't find a way to open the url. Do it yourself, please."
		exit 1
	fi
}

debug "Trying to open file ${_arg_file_path}"

if [ ! -f "${_arg_file_path}" ]; then
	echoerr "Path must exist and be a regular file."
	exit 1
fi

# Normalize file path
realPath="$(realpath "${_arg_file_path}")"
basePath="$(dirname "${realPath}")"

debug "Enclosing directory is ${basePath}, running commands from there."

# Extract git repository info
repositoryUrl="$(findGitRepositoryUrl "${basePath}")"
hostUrl="${repositoryUrl}"
if [[ "${hostUrl}" == *@* ]]; then
	hostUrl="${hostUrl/git@}"
	hostUrl="${hostUrl/\:*}"
fi
if [[ "${hostUrl}" == https* ]]; then
	hostUrl="${hostUrl/https:\/\/}"
	hostUrl="${hostUrl/\/*}"
fi

debug "Repository url: ${repositoryUrl}"
debug "Host url: ${hostUrl}"

# Find out what kind of git host it is
hostType="$(findGitHostType "${hostUrl}")"

debug "Host type is: ${hostType}"

# Get relative file path
relativePath="$(getRelativeFilePath "${basePath}" "${realPath}")"

# Get the remote repo path
repoPath="$(getRemoteRepoPath "${repositoryUrl}")"

debug "Repo path is: ${repoPath}"

# Build the url
fileUrl="$(buildFileUrl "${basePath}" "${hostType}" "${hostUrl}" "${repoPath}" "${relativePath}")"

echoerr "Found url:"
echo "${fileUrl}"
echoerr "Opening..."

# Open the url
openUrl "${fileUrl}"

# ] <-- needed because of Argbash
