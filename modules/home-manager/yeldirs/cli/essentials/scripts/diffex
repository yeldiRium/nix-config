#!/usr/bin/env bash

# Created by argbash-init v2.10.0
# ARG_POSITIONAL_SINGLE([cmd1])
# ARG_POSITIONAL_SINGLE([cmd2])
# ARG_DEFAULTS_POS([])
# ARG_HELP([Runs two commands and diffs their outputs using nvim])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_cmd1=
_arg_cmd2=
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "Runs two commands and diffs their outputs using nvim"
	printf 'Usage: %s [-h|--help] <cmd1> <cmd2>\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'cmd1' and 'cmd2'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_cmd1 _arg_cmd2 "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -e

if [ -z "${_arg_cmd1}" ] || [ -z "${_arg_cmd2}" ]; then
  echo "Please provide two commands whose output you want to diff"
  exit 1
fi

tmpdir=$(mktemp -d)

filePath1="${tmpdir}/file1"
filePath2="${tmpdir}/file2"

sh -c "${_arg_cmd1}" > "${filePath1}"
sh -c "${_arg_cmd2}" > "${filePath2}"

nvim -d -R "${filePath1}" "${filePath2}"

rm -rf tmpdir

# ] <-- needed because of Argbash
