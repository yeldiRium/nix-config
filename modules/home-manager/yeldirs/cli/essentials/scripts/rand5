#!/usr/bin/env bash

# ARG_HELP([Generates a random hex string of length n.])
# ARG_OPTIONAL_SINGLE([number],[n],[amount of random symbols],[5])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='hn'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_number="5"


print_help()
{
	printf '%s\n' "Generates a random hex string of length n."
	printf 'Usage: %s [-h|--help] [-n|--number <arg>]\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-n, --number: amount of random symbols (default: '5')"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-n|--number)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_number="$2"
				shift
				;;
			--number=*)
				_arg_number="${_key##--number=}"
				;;
			-n*)
				_arg_number="${_key##-n}"
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -e

tr -dc 'a-f0-9' < /dev/urandom | head -c "${_arg_number}"

# ] <-- needed because of Argbash
